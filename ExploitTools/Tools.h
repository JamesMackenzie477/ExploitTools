#include <Windows.h>
#include <Winternl.h>
#include <TlHelp32.h>
#include <Shlwapi.h>
#include <Psapi.h>
#include <string>
#include <iostream>

// includes the driver to be used in dkom
#include "Driver.h"

#define EXPORTED __declspec(dllexport)

#define EXPORTED_C extern "C" __declspec(dllexport)

// defines the query handle information value
#define SystemHandleInformation (SYSTEM_INFORMATION_CLASS)0x10
// defines the length mismatch error
#define STATUS_INFO_LENGTH_MISMATCH 0xC0000004

// defines the actions to be used with load remote library
// manually maps the libraray to the process
#define ACTION_MANUAL_MAP 1
// calls load library within the process
#define ACTION_LOAD_LIBRARY 2
// hijacks a thread to execute the library
#define ACTION_REDIRECT_THREAD 3

// binary is a 64 bit portable executable
#define PE64 0x20B
// binary is a 32 bit portable executable
#define PE32 0x10B

// various tools used to interact with file objects
namespace File
{
	// returns the path of a 64 bit image on the system
	EXPORTED LPCSTR FindImagePath64(LPCSTR lpModuleName);

	// returns the path of a 32 bit image on the system
	EXPORTED LPCSTR FindImagePath32(LPCSTR lpModuleName);

	// returns the basename of a path
	EXPORTED LPCSTR GetBaseName(LPCSTR lpPath);

	// creates the given path
	EXPORTED VOID CreatePath(LPCSTR lpPath);

	// reads the specified file into a buffer
	EXPORTED PVOID ReadW(LPCWSTR lpFile, PDWORD dwOut);

	// reads the specified file into a buffer
	EXPORTED PVOID ReadA(LPCSTR lpFile, PDWORD dwOut);

	// write the specified buffer and length to the disk
	EXPORTED BOOL WriteA(LPCSTR lpFile, PVOID pBuffer, DWORD dwSize);

	// write the specified buffer and length to the disk
	EXPORTED BOOL WriteW(LPCWSTR lpFile, PVOID pBuffer, DWORD dwSize);
}

// various tools used to interact with process modules
namespace Memory
{
	// scans a buffer for a particular value
	EXPORTED BOOL ScanBuffer(PBYTE pSource, DWORD dwSourceLength, PBYTE pTarget, DWORD dwTargetLength);
}

// various tools used to interact with process modules
namespace Module
{
	// defines the dll redirection structure
	typedef struct _REDIRECTION
	{
		DWORD OffsetRedirection1;
		USHORT RedirectionLength1;
		USHORT _pad1;
		DWORD OffsetRedirection2;
		USHORT RedirectionLength2;
		USHORT _pad2;
	} REDIRECTION, *PREDIRECTION;

	// defines the dll redirector structure
	typedef struct _DLLREDIRECTOR
	{
		DWORD NumberOfRedirections;
		REDIRECTION Redirection[1];
	} DLLREDIRECTOR, *PDLLREDIRECTOR;

	// defines the structure for the dll host descriptor
	typedef struct _DLLHOSTDESCRIPTOR
	{
		DWORD OffsetDllString;
		DWORD StringLength;
		DWORD OffsetDllRedirector;
	} DLLHOSTDESCRIPTOR, *PDLLHOSTDESCRIPTOR;

	// defines the structure for the api set map
	typedef struct _APISETMAP
	{
		DWORD Version;
		DWORD NumberOfHosts;
		DLLHOSTDESCRIPTOR descriptors[1];
	} APISETMAP, *PAPISETMAP;

	// define the peb structure
	typedef struct _PROCENVBLOCK
	{
		BYTE _pad1[0x68];
		PAPISETMAP ApiSetMap;
	} PROCENVBLOCK, *PPROCENVBLOCK;

	// resolves an api dll to the dll it referances
	EXPORTED LPCSTR ResolveApiModule(LPCSTR lpApiModuleName);

	// returns the nt headers of the specified module (64 bit processes only)
	EXPORTED PIMAGE_NT_HEADERS64 ReadNtHeaders64(HANDLE hProcess, HMODULE hModule);

	// returns the nt headers of the specified module (32 bit processes only)
	EXPORTED PIMAGE_NT_HEADERS32 ReadNtHeaders32(HANDLE hProcess, HMODULE hModule);

	// reads the specified directory of the given module (64 bit processes only)
	EXPORTED PVOID ReadDirectory64(HANDLE hProcess, HMODULE hModule, DWORD dwDirectory, PDWORD dwOut);

	// reads the specified directory of the given module (32 bit processes only)
	EXPORTED PVOID ReadDirectory32(HANDLE hProcess, HMODULE hModule, DWORD dwDirectory, PDWORD dwOut);

	// reads the specified directory of the given module (universal wrapper)
	EXPORTED PVOID ReadDirectory(HANDLE hProcess, HMODULE hModule, DWORD dwDirectory, PDWORD dwOut);

	// returns the base address of the module in the given process
	EXPORTED PVOID GetModuleBaseSnapshot32(DWORD dwProcessId, LPCSTR lpModuleName);

	// returns the base address of the module in the given process
	EXPORTED HMODULE GetRemoteModuleHandle(HANDLE hProcess, LPCSTR lpModuleName);

	// maps the specified image to the remote process (64 bit processes only)
	EXPORTED HMODULE RemoteMapImage64(HANDLE hProcess, LPCSTR lpImagePath);

	// maps the specified image to the remote process (32 bit processes only)
	EXPORTED HMODULE RemoteMapImage32(HANDLE hProcess, LPCSTR lpImagePath);

	// maps the specified image to the remote process (universal wrapper)
	EXPORTED HMODULE RemoteMapImage(HANDLE hProcess, LPCSTR lpImagePath);

	// rebases the specified remote image (64 bit processes only)
	EXPORTED BOOL RemoteRebaseImage64(HANDLE hProcess, HMODULE hModule);

	// rebases the specified remote image (32 bit processes only)
	EXPORTED BOOL RemoteRebaseImage32(HANDLE hProcess, HMODULE hModule);

	// rebases the specified remote image (universal wrapper)
	EXPORTED BOOL RemoteRebaseImage(HANDLE hProcess, HMODULE hModule);

	// remotely resolves the image imports (64 bit processes only)
	EXPORTED BOOL RemoteResolveImageImports64(HANDLE hProcess, HMODULE hModule);

	// remotely resolves the image imports (32 bit processes only)
	EXPORTED BOOL RemoteResolveImageImports32(HANDLE hProcess, HMODULE hModule);

	// remotely resolves the image imports (universal wrapper)
	EXPORTED BOOL RemoteResolveImageImports(HANDLE hProcess, HMODULE hModule);

	// gets the address of a procedure within the given process module by remotely parsing the export table (64 bit processes only)
	EXPORTED PVOID GetRemoteProcAddress64(HANDLE hProcess, HMODULE hModule, LPCSTR lpProcName);

	// gets the address of a procedure within the given process module by remotely parsing the export table (32 bit processes only)
	EXPORTED PVOID GetRemoteProcAddress32(HANDLE hProcess, HMODULE hModule, LPCSTR lpProcName);

	// gets the address of a procedure within the given process module by remotely parsing the export table (universal wrapper)
	EXPORTED PVOID GetRemoteProcAddress(HANDLE hProcess, HMODULE hModule, LPCSTR lpProcName);

	// remotely loads a libaray via manual map
	EXPORTED HMODULE LoadRemoteImage(HANDLE hProcess, LPCSTR lpPath);

	// remotely loads a library into the process associated with the given process handle (64 bit processes only)
	EXPORTED HMODULE LoadRemoteLibrary64(HANDLE hProcess, LPCSTR lpPath);

	// remotely loads a library into the process associated with the given process handle (32 bit processes only)
	EXPORTED HMODULE LoadRemoteLibrary32(HANDLE hProcess, LPCSTR lpPath);

	// remotely loads a library into the process associated with the given process handle (universal wrapper)
	EXPORTED HMODULE LoadRemoteLibrary(HANDLE hProcess, LPCSTR lpPath);

	// remotely loads a libaray via load library
	EXPORTED BOOL LoadLibraryRemote(HANDLE hProcess, LPCSTR lpPath);
}

// various tools used to interact with process objects
namespace Process
{
	// structure that contains handle information
	typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
	{
		ULONG ProcessId;
		BYTE ObjectTypeNumber;
		BYTE Flags;
		USHORT Handle;
		PVOID Object;
		ACCESS_MASK GrantedAccess;
	} SYSTEM_HANDLE_TABLE_ENTRY_INFO, *PSYSTEM_HANDLE_TABLE_ENTRY_INFO;

	// structure that cointains the array of handles returned from the system query
	typedef struct _SYSTEM_HANDLE_INFORMATION
	{
		ULONG HandleCount;
		SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];
	} SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION;

	// returns the length of a remote string
	EXPORTED DWORD GetRemoteStringLength(HANDLE hProcess, PVOID pString);

	// wrapper for iswow64process
	EXPORTED BOOL IsProcess32(HANDLE hProcess, PBOOL Wow64Process);

	// returns the process id for the given image name
	EXPORTED DWORD FindProcess(LPCSTR lpImageName);

	// returns the eprocess address for the process id given
	// using the ntquerysysteminformation eprocess address leak
	EXPORTED PVOID GetObjectAddress(DWORD dwProcessId);

	// sets the handle's granted access value
	EXPORTED BOOL SetHandleAccess(HANDLE hProcess, DWORD DesiredAccess = PROCESS_ALL_ACCESS);

	// opens a handle to the given process via a driver
	EXPORTED HANDLE GetProcessHandle(DWORD dwProcessId, DWORD dwDesiredAccess = PROCESS_ALL_ACCESS);

	// enables or disables the given priviliage for the given process
	EXPORTED BOOL SetPrivilege(HANDLE hProcess, LPCTSTR lpPrivilege, BOOL Enable = TRUE);

	// enables or disables the debug priviliage for the given process
	EXPORTED BOOL SetDebugPrivilege(HANDLE hProcess, BOOL Enable = TRUE);
}

// various tools used to interact with thread objects
namespace Thread
{
	// opens a handle to the given thread via a driver
	EXPORTED HANDLE GetThreadHandle(DWORD dwThreadId, DWORD dwDesiredAccess = THREAD_ALL_ACCESS);

	// returns an arbitrary thread id from the process
	EXPORTED DWORD GetProcessThread(DWORD dwProcessId);

	// redirects a the thread associated with the given thread handle (64 bit processes only)
	EXPORTED BOOL RedirectThread64(HANDLE hProcess, HANDLE hThread, PVOID pAddress, PVOID pArgument);

	// redirects a the thread associated with the given thread handle (32 bit processes only)
	EXPORTED BOOL RedirectThread32(HANDLE hProcess, HANDLE hThread, PVOID pAddress, PVOID pArgument);

	// redirects a the thread associated with the given thread handle (universal wrapper)
	EXPORTED BOOL RedirectThread(HANDLE hProcess, HANDLE hThread, PVOID pAddress, PVOID pArgument);

	// calls the specified image entry point (64 bit processes only)
	EXPORTED BOOL CallEntry64(HANDLE hProcess, PVOID pEntry, HINSTANCE hinstDLL, DWORD fdwReason = DLL_PROCESS_ATTACH);

	// calls the specified image entry point (32 bit processes only)
	EXPORTED BOOL CallEntry32(HANDLE hProcess, PVOID pEntry, HINSTANCE hinstDLL, DWORD fdwReason = DLL_PROCESS_ATTACH);

	// calls the specified image entry point (universal wrapper)
	EXPORTED BOOL CallEntry(HANDLE hProcess, PVOID pEntry, HINSTANCE hinstDLL, DWORD fdwReason = DLL_PROCESS_ATTACH);
}